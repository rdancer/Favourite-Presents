/**
 * The test class GiftTest.  Generated by BlueJ.
 *
 * Copyright BlueJ authors
 * Copyright 2011 Jan Minar <rdancer@rdancer.org>  All rights reserved.
 *
 * @author BlueJ authors
 * @author Jan Minar <rdancer@rdancer.org> 
 */

import java.util.*;
import java.util.Collections;

public class GiftTest extends junit.framework.TestCase
{
    private Gift gift, gift2;
    
    /**
     * Default constructor for test class GiftTest
     */
    public GiftTest()
    {
    }

    /**
     * Sets up the test fixture.
     *
     * Called before every test case method.
     */
    protected void setUp()
    {
        gift = new Gift();
        
        gift.setPrice(1999);
        gift.setSalesRanking(0.66666);
        gift.setAuthor("Arthur C Doyle");
        gift.setGenre("mystery");
        gift.setFormat("paperback");
        
        gift2 = new Gift();
        gift2.setPrice(3042);
        gift2.setSalesRanking(0.26);
        gift2.setAuthor("Franz Kafka");
        gift2.setGenre("mystery");
        gift2.setFormat("Trial");
    }

    /**
     * Tears down the test fixture.
     *
     * Called after every test case method.
     */
    protected void tearDown()
    {

    }
    
    public void testComparable2Objects()
    {
        assertEquals(0, gift.compareTo(gift));
        assert(gift.compareTo(gift2) < 0);
        assert(gift2.compareTo(gift) > 0);
    }
    
    public void testComparableManyObjects()
    {
        List<Gift> gifts = new ArrayList<Gift>();
        
        for (int i = 0; i < 50; i++)
        {
            Gift newGift = gift.clone();
            newGift.setPrice(i);
            gifts.add(newGift);
            
            newGift = gift.clone();
            newGift.setSalesRanking(newGift.getSalesRanking() * 0.5);
            gifts.add(newGift);
        }
        
        Collections.sort(gifts);
        
        System.out.println(gifts);
        
        Gift last, current;
        Iterator<Gift> it = gifts.iterator();

        if (it.hasNext())
        {
            for (last = it.next(), current = it.next();
                 it.hasNext();
                 last = current, current = it.next())
            {
                assert(last.getPrice() >= current.getPrice() ||
                        last.getSalesRanking() >= current.getSalesRanking());
            }
        }
    }
}